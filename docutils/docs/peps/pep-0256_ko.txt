PEP: 256
제목: Docstring Processing System Framework
버전: $Revision$
수정날짜: $Date$
저자: David Goodger <goodger@python.org>
토론-연락: <doc-sig@python.org>
상태: Draft
타입: Standards Track
내용-타입: text/x-rst
생성날짜: 01-Jun-2001
포스팅-날짜: 13-Jun-2001


개요
========

Python은 인라인 도큐멘테이션이 가능하다. Python에서는 내재된 docstring 문법을 이용하여 제한된 형태의 `Literate Programming`_ (쉽게 읽히는 프로그래밍)이 쉽게 구현 가능하다. 그러나 Python의 docstring을 추출하고 처리하기 위한 만족스러운 표준 도구는 아직 없으며, 이 PEP는 이러한 표준의 부재로 인한 문제점을 해결하기 위한 것이다.

Docstring의 처리와 관련된 문제는 쟁점이 되어왔으며 해결하기 또한 어렵다. 이 PEP에서는 일반적인 Docstring Processing System (DPS) 프레임워크를 제안한다. 이는 구성 요소(프로그램과 개념)를 분리함으로써, 합의(단일 해결책) 또는 분기(여러 해결책)를 통하여 각 문제를 해결할 수 있으며, 또한 다양한 플러그인(input context reader, markup parser, output format writer)을 사용할 수 있는 표준 인터페이스를 장려한다.

DPS 프레임워크의 개념은 구현 방법과는 독립적으로 제공된다.


Docstring PEP에 대한 로드맵
==============================

Docstring 처리에는 여러가지 측면이 있다. "Docstring PEP"는 각 이슈들을 독립적으로 해결하기 위해 이슈들을 나누었다. 관련된 PEP들은 다음과 같다.

* Docstring 문법. PEP 287, "reStructuredText Docstring Format"
  [#PEP-287]_, 은 Python docstring, PEP 등을 위한 문법을 제시한다.
  

* Docstring 의미론. 다음과 같은 최소 두가지 측면이 있다:

  - 규약: Docstring의 하이레벨 구조. PEP 257, "Docstring Conventions" [#PEP-257]_ 에서 다루어진다.

  - 방법론: Docstring의 내용에 대한 규칙들. 아직 거론되지 않는다.

* 처리 메커니즘. 이 PEP (PEP 256)에는 DPS의 조건과 하이레벨에서의 문제들이 요약되어 있다. PEP 258, "Docutils Design Specification"[# PEP-258]_, 은 현재 개발중인 DPS의 설계 및 구현에 대한 개요이다.

* 출력 스타일 : 개발자는 소스 코드에서 생성 된 도큐멘테이션을 보기 좋게 만들기를 원하며 그게 무엇을 의미하는지는 여러 가지 의견이 있다. PEP 258은 "Stylist Transforms"를 다루고 있다. Docstring 처리의 이러한 측면은 아직 추가적인 분석이 필요하다.

이슈들을 분리함으로써, 우리는 더 쉽게 합의점에 이를 수 있고, 다양성을 더 쉽게 받아 들일 수있다.


이론적 근거
===========

다른 언어에는 이미 표준 인라인 도큐멘테이션 시스템이 있다. 예를 들어, Perl은 POD_ ( "Plain Old Documentation")를 가지고 있고 Java는 Javadoc_ 을 가지고 있지만 이 두가지 방식은 Pythonic하지 않기에 Python에서 사용하기에는 적합하지 않다. POD 문법은 매우 명확하지만 가독성이 떨어지며, Javadoc은 매우 HTML적이다. "``@ field``"태그를 제외하고는 HTML이 마크 업에 사용된다. 또한 Autoduck_ 및 Web_ (Tangle & Weave)과 같은 여러 언어에 쓰이는 일반적인 도구가 있기도 하다.

파이썬에 대한 자동 도큐멘테이션 시스템을 만들려는 다음과 같은 많은 시도가 있었다:

- Marc-Andre Lemburg의 doc.py_

- Daniel Larsson의 pythondoc_ & gendoc_

- Doug Hellmann의 HappyDoc_

- Laurence Tratt의 Crystal (더 이상 웹에서 볼 수 없음)

- Ka-Ping Yee의 pydoc_ (pydoc.py는 이제 Python 의 표준 라이브러리의 일부이다. 아래 참조)

- Tony Ibbs의 docutils_ (Tony는이 이름을 `Docutils project`_ 에 기부하였음)

- Edward Loper의 STminus_ 공식화 및 관련 노력들

각기 다른 목표를 가진 위의 여러 시스템은 다양한 수준의 성공을 거두었다. 대부분의 시스템은 지나친 야망과 부족한 유연성으로 인해 여러 문제점을 가지고 있다. 그들은 독립된 세트로 docstring 추출 시스템, markup parser, 내부 처리 시스템, 고정 된 스타일을 가진 output format writer를 모두 포함하여 제공했다. 필연적으로 각 시스템에서는 하나 이상의 심각한 단점이 있었으며, 쉽게 확장하거나 수정하지 못하여 표준 도구로 채택되는데 방해가 되었다.

그 어떠한 단일한 시스템도 모든 이해 당사자들의 지지를 얻기 힘들기 때문에 "모 아니면 도"식으로 접근하는 방식은 옳지 못하다. 확장을 염두에 둔 모듈방식이 유일한 해결책이라고 볼 수 있다. 구성요소 간 표준 API는 전체에 대한 상세한 지식 없이도 DPS 구성요소의 이해를 가능하게 하며, 기여에 대한 장벽을 낮추고, 궁극적으로 풍부한 시스템을 만들 수 있게 해준다.

따라서 DPS의 각 구성 요소는 독립적으로 개발되어야하며, 최상의 시스템은 "선택"을 통해 만들어져야 한다. 이는 기존 시스템과 통합되거나 새롭게 개발되어야한다. 이 시스템은 Python의 표준 라이브러리에 포함되어야 한다.


PyDoc & Other Existing Systems
------------------------------

PyDoc became part of the Python standard library as of release 2.1.
It extracts and displays docstrings from within the Python interactive
interpreter, from the shell command line, and from a GUI window into a
web browser (HTML).  Although a very useful tool, PyDoc has several
deficiencies, including:

- In the case of the GUI/HTML, except for some heuristic hyperlinking
  of identifier names, no formatting of the docstrings is done.  They
  are presented within ``<p><small><tt>`` tags to avoid unwanted line
  wrapping.  Unfortunately, the result is not attractive.

- PyDoc extracts docstrings and structural information (class
  identifiers, method signatures, etc.) from imported module objects.
  There are security issues involved with importing untrusted code.
  Also, information from the source is lost when importing, such as
  comments, "additional docstrings" (string literals in non-docstring
  contexts; see PEP 258 [#PEP-258]_), and the order of definitions.

The functionality proposed in this PEP could be added to or used by
PyDoc when serving HTML pages.  The proposed docstring processing
system's functionality is much more than PyDoc needs in its current
form.  Either an independent tool will be developed (which PyDoc may
or may not use), or PyDoc could be expanded to encompass this
functionality and *become* the docstring processing system (or one
such system).  That decision is beyond the scope of this PEP.

Similarly for other existing docstring processing systems, their
authors may or may not choose compatibility with this framework.
However, if this framework is accepted and adopted as the Python
standard, compatibility will become an important consideration in
these systems' future.


Specification
=============

The docstring processing system framework is broken up as follows:

1. Docstring conventions.  Documents issues such as:

   - What should be documented where.

   - First line is a one-line synopsis.

   PEP 257 [#PEP-257]_ documents some of these issues.

2. Docstring processing system design specification.  Documents
   issues such as:

   - High-level spec: what a DPS does.

   - Command-line interface for executable script.

   - System Python API.

   - Docstring extraction rules.

   - Readers, which encapsulate the input context.

   - Parsers.

   - Document tree: the intermediate internal data structure.  The
     output of the Parser and Reader, and the input to the Writer all
     share the same data structure.

   - Transforms, which modify the document tree.

   - Writers for output formats.

   - Distributors, which handle output management (one file, many
     files, or objects in memory).

   These issues are applicable to any docstring processing system
   implementation.  PEP 258 [#PEP-258]_ documents these issues.

3. Docstring processing system implementation.

4. Input markup specifications: docstring syntax.  PEP 287 [#PEP-287]_
   proposes a standard syntax.

5. Input parser implementations.

6. Input context readers ("modes": Python source code, PEP, standalone
   text file, email, etc.) and implementations.

7. Stylists: certain input context readers may have associated
   stylists which allow for a variety of output document styles.

8. Output formats (HTML, XML, TeX, DocBook, info, etc.) and writer
   implementations.

Components 1, 2/3/5, and 4 are the subject of individual companion
PEPs.  If there is another implementation of the framework or
syntax/parser, additional PEPs may be required.  Multiple
implementations of each of components 6 and 7 will be required; the
PEP mechanism may be overkill for these components.


Project Web Site
================

A SourceForge project has been set up for this work at
http://docutils.sourceforge.net/.


References and Footnotes
========================

.. [#PEP-287] PEP 287, reStructuredText Docstring Format, Goodger
   (http://www.python.org/peps/pep-0287.html)

.. [#PEP-257] PEP 257, Docstring Conventions, Goodger, Van Rossum
   (http://www.python.org/peps/pep-0257.html)

.. [#PEP-258] PEP 258, Docutils Design Specification, Goodger
   (http://www.python.org/peps/pep-0258.html)

.. _Literate Programming: http://www.literateprogramming.com/

.. _POD: http://perldoc.perl.org/perlpod.html

.. _Javadoc: http://java.sun.com/j2se/javadoc/

.. _Autoduck:
   http://www.helpmaster.com/hlp-developmentaids-autoduck.htm

.. _Web: http://www-cs-faculty.stanford.edu/~knuth/cweb.html

.. _doc.py:
   http://www.egenix.com/files/python/SoftwareDescriptions.html#doc.py

.. _pythondoc:
.. _gendoc: http://starship.python.net/crew/danilo/pythondoc/

.. _HappyDoc: http://happydoc.sourceforge.net/

.. _pydoc: http://www.python.org/doc/current/lib/module-pydoc.html

.. _docutils: http://www.tibsnjoan.co.uk/docutils.html

.. _Docutils project: http://docutils.sourceforge.net/

.. _STMinus: http://www.cis.upenn.edu/~edloper/pydoc/

.. _Python Doc-SIG: http://www.python.org/sigs/doc-sig/


Copyright
=========

This document has been placed in the public domain.


Acknowledgements
================

This document borrows ideas from the archives of the `Python
Doc-SIG`_.  Thanks to all members past & present.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:
